pipeline {
    
    agent {
        label 'agent-1'
    }
    
    tools {
          maven 'MAVEN_3'
          jdk 'JAVA8'
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
        disableConcurrentBuilds()
        timestamps()
        ansiColor('xterm')

    }

    parameters {
        string description: 'The GitHub Branch Name', name: 'branch_name'
    }

    stages {
        stage('Code Checkout'){
            steps {
                deleteDir()
                echo "code checkout"
                git branch: '$branch_name', credentialsId: 'github-creds', url: "https://github.com/gkdevops/PetClinic.git"
            }
        }

        stage('Secrets Detection'){
            steps {
                sh "gitleaks detect --report-path gitleaks-report.json"
            }
        }

        stage('Unit Tests & Package'){
            steps {
                sh "mvn package"
            }
        }

        stage('SonarQube Scan'){
          environment {
            SCANNER_HOME = tool 'sonar_scanner'
          }
          steps {
            withSonarQubeEnv (installationName: 'SonarQube') {
              sh "${SCANNER_HOME}/bin/sonar-scanner -Dproject.settings=sonar-project.properties"
            }
          }
        }

        stage('Build & Upload Docker'){
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-registry', passwordVariable: 'JFROGPASSWORD', usernameVariable: 'JFROGUSER')]) {
                    sh '''
                    IMAGE_TAG=`git rev-parse --short HEAD`
                    sudo docker login -u $JFROGUSER -p $JFROGPASSWORD ec2-54-226-169-77.compute-1.amazonaws.com:8082
                    sudo docker image build -t ec2-54-226-169-77.compute-1.amazonaws.com:8082/mypets-docker/petclinic:${IMAGE_TAG} .
                    sudo docker image push ec2-54-226-169-77.compute-1.amazonaws.com:8082/mypets-docker/petclinic:${IMAGE_TAG}
                    '''
                }
            }
        }
        stage('Update Kubernetes config'){
            steps {
                echo "Update K8S YAML files for Dev env"
            }
        }

        stage('Deploy to Dev'){
            steps {
                echo "Deploy to Dev Kubernetes Cluster"
            }
        }

    }
}
